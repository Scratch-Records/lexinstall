
 ğŸ”¹Comment-> // Using let, var, and const



 ğŸ”¹Comment-> // Variable declaration using let


 ğŸ”¹Keyword-> let

 ğŸ”¹identifier -> x

 ğŸ”¹Comparison operator-> =

 ğŸ”¹Digits-> 5

 ğŸ”¹Punctuation-> ;

 ğŸ”¹Keyword-> let

 ğŸ”¹identifier -> y

 ğŸ”¹Comparison operator-> =

 ğŸ”¹Digits-> 10

 ğŸ”¹Punctuation-> ;


 ğŸ”¹Comment-> // Variable declaration using var


 ğŸ”¹Keyword-> var

 ğŸ”¹identifier -> z

 ğŸ”¹Comparison operator-> =

 ğŸ”¹Digits-> 15

 ğŸ”¹Punctuation-> ;


 ğŸ”¹Comment-> // Constant declaration using const


 ğŸ”¹Keyword-> const

 ğŸ”¹identifier -> PI

 ğŸ”¹Comparison operator-> =

 ğŸ”¹Digits-> 3
.
 ğŸ”¹Digits-> 14159

 ğŸ”¹Punctuation-> ;


 ğŸ”¹Comment-> // If statement


 ğŸ”¹Keyword-> if

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> x

 ğŸ”¹Assignment operator-> <

 ğŸ”¹identifier -> y

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> {

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹String-> "x is less than y"

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;

 ğŸ”¹Punctuation-> }
 ğŸ”¹Keyword-> else

 ğŸ”¹Punctuation-> {

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹String-> "x is greater than or equal to y"

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;

 ğŸ”¹Punctuation-> }


 ğŸ”¹Comment-> // While loop


 ğŸ”¹Keyword-> let

 ğŸ”¹identifier -> i

 ğŸ”¹Comparison operator-> =

 ğŸ”¹Digits-> 0

 ğŸ”¹Punctuation-> ;

 ğŸ”¹Keyword-> while

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> i

 ğŸ”¹Assignment operator-> <

 ğŸ”¹Digits-> 5

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> {

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> i

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;

 ğŸ”¹identifier -> i

 ğŸ”¹Unary operator-> ++

 ğŸ”¹Punctuation-> ;

 ğŸ”¹Punctuation-> }


 ğŸ”¹Comment-> // For loop


 ğŸ”¹Keyword-> for

 ğŸ”¹Punctuation-> (
 ğŸ”¹Keyword-> let

 ğŸ”¹identifier -> j

 ğŸ”¹Comparison operator-> =

 ğŸ”¹Digits-> 0

 ğŸ”¹Punctuation-> ;
 ğŸ”¹identifier -> j

 ğŸ”¹Assignment operator-> <

 ğŸ”¹Digits-> 5

 ğŸ”¹Punctuation-> ;
 ğŸ”¹identifier -> j

 ğŸ”¹Unary operator-> ++

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> {

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> j

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;

 ğŸ”¹Punctuation-> }


 ğŸ”¹Comment-> // Array declaration and manipulation


 ğŸ”¹Keyword-> let

 ğŸ”¹identifier -> myArray

 ğŸ”¹Comparison operator-> =

 ğŸ”¹Punctuation-> [
 ğŸ”¹Digits-> 1

 ğŸ”¹Punctuation-> ,
 ğŸ”¹Digits-> 2

 ğŸ”¹Punctuation-> ,
 ğŸ”¹Digits-> 3

 ğŸ”¹Punctuation-> ,
 ğŸ”¹Digits-> 4

 ğŸ”¹Punctuation-> ,
 ğŸ”¹Digits-> 5

 ğŸ”¹Punctuation-> ]
 ğŸ”¹Punctuation-> ;

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> myArray

 ğŸ”¹Punctuation-> [
 ğŸ”¹Digits-> 2

 ğŸ”¹Punctuation-> ]
 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;
 ğŸ”¹Comment-> // Output: 3


 ğŸ”¹identifier -> myArray
.
 ğŸ”¹identifier -> push

 ğŸ”¹Punctuation-> (
 ğŸ”¹Digits-> 6

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;
 ğŸ”¹Comment-> // Add an element to the end of the array


 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> myArray

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;
 ğŸ”¹Comment-> // Output: [1, 2, 3, 4, 5, 6]



 ğŸ”¹Comment-> // Function declaration


 ğŸ”¹Keyword-> function

 ğŸ”¹identifier -> multiply

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> a

 ğŸ”¹Punctuation-> ,
 ğŸ”¹identifier -> b

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> {

 ğŸ”¹Keyword-> return

 ğŸ”¹identifier -> a

 ğŸ”¹Binary Operator-> *

 ğŸ”¹identifier -> b

 ğŸ”¹Punctuation-> ;

 ğŸ”¹Punctuation-> }


 ğŸ”¹Keyword-> let

 ğŸ”¹identifier -> result

 ğŸ”¹Comparison operator-> =

 ğŸ”¹identifier -> multiply

 ğŸ”¹Punctuation-> (
 ğŸ”¹Digits-> 3

 ğŸ”¹Punctuation-> ,
 ğŸ”¹Digits-> 4

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> result

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;
 ğŸ”¹Comment-> // Output: 12



 ğŸ”¹Comment-> // Switch statement


 ğŸ”¹Keyword-> let

 ğŸ”¹identifier -> day

 ğŸ”¹Comparison operator-> =

 ğŸ”¹Digits-> 1

 ğŸ”¹Punctuation-> ;

 ğŸ”¹identifier -> switch

 ğŸ”¹Punctuation-> (
 ğŸ”¹identifier -> day

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> {

 ğŸ”¹identifier -> case

 ğŸ”¹Digits-> 1
:

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹String-> "Monday"

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;

 ğŸ”¹Keyword-> break

 ğŸ”¹Punctuation-> ;

 ğŸ”¹identifier -> case

 ğŸ”¹Digits-> 2
:

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹String-> "Tuesday"

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;

 ğŸ”¹Keyword-> break

 ğŸ”¹Punctuation-> ;

 ğŸ”¹identifier -> default
:

 ğŸ”¹identifier -> console
.
 ğŸ”¹identifier -> log

 ğŸ”¹Punctuation-> (
 ğŸ”¹String-> "Other day"

 ğŸ”¹Punctuation-> )
 ğŸ”¹Punctuation-> ;

 ğŸ”¹Punctuation-> }

 ğŸ”¹symbol table
x
y
z
PI
console
log
i
j
myArray
push
