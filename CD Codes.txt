Compiler Design Codes


1.Count No of lines tabs and spaces.


%{
#include<stdio.h>
int char_cnt = 0,word_cnt=0,line_cnt=0,tab_cnt=0,space_cnt=0;
%}

%%
[\n] {line_cnt += 1; char_cnt+= yyleng;}
[\t] {tab_cnt++; char_cnt+= yyleng;}
[ ] {space_cnt++; char_cnt+= yyleng;}
[^ \t\n]+ {word_cnt += 1;char_cnt += yyleng;}
%%

int main(){
    printf("Input : ");
    yylex();
    printf("Number of chars : %d\n",char_cnt);
    printf("Number of words : %d\n",word_cnt);
    printf("Number of lines : %d\n",line_cnt);
    printf("Number of tabs : %d\n",tab_cnt);
    printf("Number of space : %d\n",space_cnt);
    return 0;
}
int yywrap(){ return 1;}

 








2.Implement lexical analyzer for given language .

%{
# include<stdio.h>
# include<string.h>
struct symtab
{
char *name;
};
struct symtab sym[10],*k;
struct symtab *install_id(char *s);
void disp();
%}
L    [a-zA-Z]
D    [0-9]
id   {L}({L}|{D})*
num    {D}+(\.{D}+)?([eE][-+]?{D}+)?
bop    [-+*/=]
uop    "++"|"--"
relop             "<"|"<="|">"|">="|"!="|"=="
lop         "&&"|"||"
bitlop       [&|!]
kew   "if"|"else"|"while"|"do"|"for"|"int"|"char"|"float"
pun           [,;'"\[\]\{\}\)\(]
comment  "//"
ws     [ \t\n]+
st        \"(.)*\"
%%
{ws} 	{}
{kew} {printf("keyword=%s\n",yytext);}
{id} {k=install_id(yytext);printf("identifier =%s\n",yytext);}
{num} {printf("constant =%s\n",yytext);}
{bop} {printf("binary op =%s\n",yytext);}
{uop} {printf("unary op =%s\n",yytext);}
{relop} {printf("relational op=%s\n",yytext);}
{lop} {printf("logical op =%s\n",yytext);}
{pun} {printf("punct =%s\n",yytext);}
{bitlop} {printf("bitwise logical op=%s\n",yytext);}
{comment} {printf("comment =%s\n",yytext);}
{st} 	{printf("string =%s\n",yytext);}
%%
int main()
{
yylex();
disp();
}
struct symtab *install_id(char *s)
{
struct symtab *p;
printf("in symbol table\n");
for(p=&sym[0];p<&sym[10];p++)
{
if(p->name && !strcmp(s,p->name))
return p;
if(!p->name)
{
p->name=strdup(s);
return p;
}
}
}
void disp()
{
struct symtab *p;
printf("symbol table\n");
for(p=&sym[0];p<&sym[10];p++)
{
if(p->name)
printf("%s\n",p->name);
}
}
int yywrap()
{
return 1;
}

 









3.Program for syntax checking for subset of given language




lex
%{
#include"y.tab.h"
%}
NOUN "Dog"|"Asha"
VERB "Run"|"Sing"
PREPOSITION "In"|"On"|"Below"|"Above"|"Beside" 
ADJECTIVE "Good"|"Bad"|"Big"|"small"|"Tall"|"Short"|"ugly"|"Beautiful"|"Adorable"
PRONOUN "He"|"She"|"It"|"They"|"Them"
DET "a"|"an"|"the"
CONJ ([aA][nN][dD])|([oO][rR])|([bB][uU][tT])
%%
{NOUN} {return NOUN;}
{VERB} {return VERB;}
{PREPOSITION} {return Preposition;}
{ADJECTIVE} {return ADJECTIVE;}
{PRONOUN} {return PRONOUN;}
{DET} {return DET;}
{CONJ} {return CONJ;}
"." {return yytext[0];}
.|\n {}
%%
int yywrap()
{
return 1;
}



yacc

%{
#include <stdio.h>
%}

%token DET NOUN PRONOUN VERB Preposition ADJECTIVE
%nonassoc NOUN
%nonassoc Preposition
%nonassoc CONJ

%%
S1:S1 S
 |S
 ;
 
S:SS '.' {printf("Simple Sentence");}
|CS'.' ;

CS:SS CONJ SS {printf("Compound Sentence");}
 |CS CONJ SS;
 
SS:N V | V;

N:DET NOUN 
 | NOUN 
 | PRONOUN 
 | DET NOUN P ;
 
V:VERB N | VERB |V P;

P:Preposition N;

%%
main()
{
yyparse();
}
int yyerror(char* msg)
{
return 1;
}


 





































4.Control statement syntax analyzer

Assign4.l file

%{
 # include<stdio.h>
 # include "y.tab.h"
%}
digits [0-9]

%%
"int" {return INT;}
"if" {return IF;}
"while" {return WHILE;}
"true" {return TRUEE;}
"false" {return FALSEE;}
"do" {return DO;}
"for" {return FOR;}
{digits}+ {return NUM;}
"<"|"<="|">"|">="|"!="|"==" {return RELOP;}
"&&" {return AND;}
"||" {return OR;}
"!" {return NOT;}
"++" {return INC;}
"--" {return DEC;}
[a-zA-Z][a-zA-Z0-9]* {return ID;}
[-\)\(\{\}\[\]+*/,;=] {return yytext[0];}
[ \t\n]  { }
%%
int yywrap(){
    return 1;
}

Assign4.y file




%{
 # include<stdio.h>
  int yyerror(char*);
  int yylex();
%}
%token ID NUM IF WHILE DO FOR TRUEE FALSEE INC DEC INT
%right '='
%left '+' '-'
%left '*' '/'
%left OR
%left AND
%nonassoc NOT
%right RELOP

%%
s1 : s1 s|s;
s : ASSIGNMENT ';' {printf("Proper Assignment. \n");};|
    IF_STMT {printf("Proper IF statement. \n");};|
    WHILE_STMT {printf("Proper WHILE loop. \n");};|
    DO_WHILE_STMT {printf("Proper D0-WHILE loop. \n");};|
    FOR_STMT {printf("Proper FOR loop. \n");}
ASSIGNMENT: ID '=' E | ARR '=' E;
E: E'+'E | E'-'E |E'*'E |E'/'E | ARR | NUM | ID ;
IF_STMT: IF'('BE')''{'s1'}';
BE: BE OR BE | BE AND BE | NOT BE | ID RELOP ID | NUM RELOP ID | ID RELOP NUM | TRUEE | FALSEE | NUM | 
    ARR RELOP ARR | ARR RELOP ID | ID RELOP ARR | ARR RELOP NUM | NUM RELOP ARR | NUM RELOP NUM;
ARR: ID X;
X: X SUBSCRIPT | SUBSCRIPT;
SUBSCRIPT: '['ID']' | '['NUM']' |'['ARR']';
WHILE_STMT: WHILE'('BE')''{'s1'}';
DO_WHILE_STMT: DO'{'s1'}'WHILE'('BE')'';';
FOR_STMT: FOR'('INIT_STMT ';' BE ';' MODIFICATION ')' '{'s1'}';
INIT_STMT: ASSIGNMENT | INT ASSIGNMENT | INT ASSIGNMENT ',' INIT_STMT | ASSIGNMENT ',' INIT_STMT;
MODIFICATION: ID INC | INC ID | ID DEC | DEC ID | INIT_STMT |
             ID INC ',' MODIFICATION | ID DEC ',' MODIFICATION
            INC ID ',' MODIFICATION| DEC ID ',' MODIFICATION;

%%
int main(){
    yyparse();
    return 0;
}
int yyerror(char *s){
    return 1;
}










5.Program  to check the syntax declaration statement using lex and yacc.

Assign5.l

%{
#include "y.tab.h"
%}
letter [a-zA-Z]
num [0-9]+
float {num}+\.{num}+
bools "true"|"false"
identifier {letter}({letter}|{num})*
%%
"int" { return Int; }
"char" { return Char; }
"float" { return Float; }
"bool" { return Bool; }
{num} { return IntV; }
{float} { return FloatV; }
{bools} { return BoolV; }
{identifier} { return Id; }
"'"(.)"'" { return CharV; }
[,;=] { return yytext[0]; }
%%
int yywrap() {
return 1;
}

assign5.y

%{
#include <stdio.h>
%}
%token Int Char Float Bool String IntV CharV FloatV BoolV StringV Id Am Const
%%
S1: S1 S
| S
;
S: Int Iv';' { printf("int declaration accepted"); }
| Char Cc';' { printf("char declaration accepted"); }
| Float Ff';' { printf("float declaration accepted"); }
| Bool Bb';' { printf("bool declaration accepted."); }
;
Iv: IdM
| Iv ',' Id
| Id '=' IntV
| Iv ',' Id '=' IntV
;
Cc: IdM
| Cc ',' Id
| Id '=' CharV
| Cc ',' Id '=' CharV
;
Ff: IdM
| Ff ',' Id
| Id '=' FloatV
| Ff ',' Id '=' FloatV
;
Bb: IdM
| Bb ',' Id
| Id '=' BoolV
| Bb ',' Id '=' BoolV
;
Ss: IdM
| Ss ',' Id
| Id '=' StringV
| Ss ',' Id '=' StringV
;
IdM: Id
;
%%
void yyerror(char*s) {
printf("%s", s);
}
int main() {
yyparse();
return 0;
}








 










6.Calculator using the lex and yacc

Assign 6.l
%{ 
#include "y.tab.h" 
%}

%% 
[0-9]+ { yylval = atoi(yytext); 
        return digit;
      }
[\n] { return yytext[0]; } 
. { return yytext[0]; }
%%

int yywrap(void) {
   return 1;
}




assign6.y

%{
#include <stdio.h> 
#include <stdlib.h> 
#include <ctype.h> 

int yyerror(char *);
int yylex(void);

extern int yylval;
%}

%token digit

%start S

%%
S: S E '\n' { printf("ans = %d\n", $2); }
 | E '\n' { printf("ans = %d\n", $1); }
 ;

E: E '+' B { $$ = $1 + $3; }
 | B
 ;

B: B '-' T { $$ = $1 - $3; }
 | T
 ;

T: T '*' F { $$ = $1 * $3; }
 | F
 ;

F: '(' E ')' { $$ = $2; }
 | digit
 ;

%%

int main() {
   printf("Enter the expression: ");
   yyparse();
   return 0;
}

int yyerror(char *msg) {
   printf("%s\n", msg);
   return 1;
}

 


